; ---------------------------------------------
; NETWORK SETTINGS
; ---------------------------------------------
;
; network_enabled      = true / false         true  = all eCAL components communicate over network boundaries
;                                             false = local host only communication
;
; multicast_group      = 239.0.0.1            UDP multicast group base
;
; multicast_mask       = 0.0.0.1-0.0.0.255    Mask maximum number of dynamic multicast group
;
; multicast_port       = 14000 + x            UDP multicast port number (eCAL will use at least the 2 following port
;                                             numbers too, so please modify in steps of 10 (e.g. 1010, 1020 ...)
;
; multicast_ttl        = 0 + x                UDP ttl value, also known as hop limit, is used in determining 
;                                             the intermediate routers being traversed towards the destination
;
; multicast_sndbuf    = 1024 * x              UDP send buffer in bytes
;  
; multicast_rcvbuf    = 1024 * x              UDP receive buffer in bytes
;  
; unicast_ipaddr      = 127.0.0.1             UDP unicast group for eCAL unicast
; unicast_port        = 15000                 UDP unicast port number for eCAL unicast
; 
; bandwidth_max_udp   = 1048576               UDP bandwidth limit for eCAL udp layer (-1 == unlimited)
;  
; inproc_rec_enabled  = true                  Enable to receive on eCAL inner process layer
; shm_rec_enabled     = true                  Enable to receive on eCAL shared memory layer
; udp_mc_rec_enabled  = true                  Enable to receive on eCAL udp multicast layer
; udp_uc_rec_enabled  = false                 Enable to receive on eCAL udp unicast layer
; lcm_rec_enabled     = false                 Enable to receive on Google lcm layer
; rtps_rec_enabled    = false                 Enable to receive on FastRtps layer (ROS2)
; iceoryx_rec_enabled = false                 Enable to receive on Iceoryx layer
;
; npcap_enabled       = false                 Enable to receive UDP traffic with the Npcap based receiver
; ---------------------------------------------

[network]
network_enabled     = true
multicast_group     = 239.0.0.1
multicast_mask      = 0.0.0.15
multicast_port      = 14000
multicast_ttl       = 1
multicast_sndbuf    = 5242880
multicast_rcvbuf    = 5242880

multicast_group_mtl = 239.0.0.1
multicast_port_mtl  = 14100

unicast_ipaddr      = 127.0.0.1
unicast_port        = 15000

bandwidth_max_udp   = -1

inproc_rec_enabled  = true
shm_rec_enabled     = true
udp_mc_rec_enabled  = true
udp_uc_rec_enabled  = false
lcm_rec_enabled     = false
rtps_rec_enabled    = false
iceoryx_rec_enabled = false

npcap_enabled       = false

; ---------------------------------------------
; COMMON SETTINGS
; ---------------------------------------------
;
; registration_timeout = 1000 + (x * 1000)           timeout for topic registration in ms
;
; registration_refresh < registration_timeout/2      topic registration refresh cylce (has to be smaller then registration timeout !)
;
; ---------------------------------------------
[common]
registration_timeout  = 60000
registration_refresh  = 1000

; ---------------------------------------------
; TIME SETTINGS
; ---------------------------------------------
;
; timesync_module_rt        = "ecaltime-localtime"   module (dll|so) name time sync interface.
;                                                    The name will be extended with platform suffix (32|64),
;                                                    debug suffix (d) and platform extension (.dll|.so)
;                                                    
;                                                    Available modules are:
;                                                      - ecaltime-localtime    local system time without synchronization        
; ---------------------------------------------
[time]
timesync_module_rt        = "ecaltime-localtime"

; ---------------------------------------------
; RTPS SETTINGS
; ---------------------------------------------
;
; domain                    = "eCAL"                 default fastRTPS domain name
;
; ---------------------------------------------
[rtps]
domain                    = "eCAL"

; ---------------------------------------------
; ICEORYX SETTINGS
; ---------------------------------------------
;
; service                   = "eCAL"                 default Iceoryx service name
; instance                  = ""                     default Iceoryx service instance name
;
; ---------------------------------------------
[iceoryx]
service                   = "eCAL"
instance                  = ""

; ---------------------------------------------
; PUBLISHER SETTINGS
; ---------------------------------------------
;
; use_inproc                = 0, 1, 2                use inner process transport layer (0 = off, 1 = on, 2 = auto, default = 0)
; use_shm                   = 0, 1, 2                use shared memory transport layer (0 = off, 1 = on, 2 = auto, default = 2)
; use_udp_mc                = 0, 1, 2                use udp multicast transport layer (0 = off, 1 = on, 2 = auto, default = 2)
; use_udp_uc                = 0, 1                   use udp unicast transport layer   (0 = off, 1 = on,           default = 0)
; use_lcm                   = 0, 1                   use lcm transport layer           (0 = off, 1 = on,           default = 0)
; use_rtps                  = 0, 1                   use rtps transport layer          (0 = off, 1 = on            default = 0)
; use_iceoryx               = 0, 1                   use iceoryx transport layer       (0 = off, 1 = on            default = 0)
;
; memfile_minsize           = x * 4096 kB            default memory file size for new publisher
;
; memfile_reserve           = 20 .. x %              dynamic file size reserve before recreating memory file if topic size changes
;
; memfile_ack_timeout       = 0 .. x ms              publisher timeout for ack event from subscriber that memory file content is processed
;
; share_ttype               = 0, 1                   share topic type via registration layer
; share_tdesc               = 0, 1                   share topic description via registration layer
;                                                    switch off to disable reflection
; ---------------------------------------------
[publisher]
use_inproc                = 0
use_shm                   = 2
use_udp_mc                = 2
use_udp_uc                = 0
use_lcm                   = 0
use_rtps                  = 0
use_iceoryx               = 0

memfile_minsize           = 4096
memfile_reserve           = 50
memfile_ack_timeout       = 0

share_ttype               = 1
share_tdesc               = 1

; ---------------------------------------------
; MONITORING SETTINGS
; ---------------------------------------------
;
; timeout          = 1000 + (x * 1000)               timeout for topic monitoring in ms
; filter_excl      = Message1, Message2              topics blacklist as regular expression (will not be monitored)
; filter_incl      = Message1, Message2              topics whitelist as regular expression (will be monitored only)
; filter_log_con   = info, warning, error            log messages to console (all, info, warning, error, fatal, debug1, debug2, debug3, debug4)
; filter_log_file  = debug1, debug2                  log messages to log file
; filter_log_udp   = all                             log messages to udp bus
;
; ---------------------------------------------
[monitoring]
timeout            = 5000
filter_excl        = __.*
filter_incl        =
filter_log_con     = error, fatal
filter_log_file    =
filter_log_udp     = info, warning, error, fatal

; ---------------------------------------------
; SYS SETTINGS
; ---------------------------------------------
;
; filter_excl      = App1,App2                       apps blacklist to be excluded when importing tasks from cloud
;
; ---------------------------------------------
[sys]
filter_excl        = ^eCALRPCService$|^eCALMon$|^eCALPlay$|^eCALPlayGUI$|^eCALRec$|^eCALRecGUI$|^eCALSys$|^eCALSysGUI$|^Machine Monitoring Agent|^Any \(LCM\)$
